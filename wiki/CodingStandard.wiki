#summary The coding standards to be used for the project.
#labels Phase-Implementation,Featured

= Introduction =

Coding standards are necessary to preserve everyone's sanity on a shared software project.


= Standards =

Please be: Clear; Simple; Conservative.  Avoid optimisation.

Coding in Python is preferred.  Avoid other languages where possible.

== Python ==

[http://www.python.org/dev/peps/pep-0008/ PEP 8] applies.  A very brief summary of which is: 4 space indent (no tabs); 79 columns; one import per line; no white-space before colons; newline immediately after a colon.

All Python code should run on a Python 2.4 system (see "Please be conservative", above).  So do not use newer features.  Read the [http://www.python.org/doc/2.4.4/ Python 2.4 documentation] to avoid accidentally using newer features.  But be aware that Python may actually be run using a newer Python version.  So do not use anything that changes in a later version (I don't know of anything important off-hand, but obviously anything deprecated is right out).

(In particular regarding Python 2.4 compatible code:) «x if c else y» (Python's ternary expression) is not allowed, because it is Python 2.5.

Avoid non-standard extensions.  Sadly this means no numy, no PIL.  For now.

Python files should start with a #! line then an $Id$ line:

{{{
#!/usr/bin/env python
# $Id$
}}}

In general they should be executable and should run tests when executed, unless they actually implement a command line tool.

=== Things PEP 8 doesn't mention ===

No tabs.  Ever.

Prefer `[0] * 12` and `'abc' * 10` over `12 * [0]`.  In other words sequence on left, number on right.  This is a completely arbitrary choice so drj just picked one (the one that drj does by habit, as it happens).

=== import ===

(one per line, see PEP 8)

The line previous to an import statement should be a comment that refers to the documentation for the module.  Try and find a reference to the exact version of the documentation you were reading when you used the module.  So prefer http://www.python.org/doc/2.4.4/lib/module-urllib.html over http://www.python.org/doc/lib/module-urllib.html (python.org seems to have recently become friendlier in this regard, it will automatically convert a version-generic doc URL into a particular version, making it more likely that you end up referencing the documentation for a particular version).  Referencing the particular version of the documentation means that we know which version of the module you were programming against.

Avoid `from foo import *`.

An import that is local to a function is okay (this is actually a violation of PEP 8, which says all imports must go at the top of file, but I quite like it.  Discuss).


=== Documenting Code ===

Please note, this is a first draft. I plan to refine it *very* soon - pao.

For the extraction of API documentation we plan to use 
[http://epydoc.sourceforge.net/ EpyDoc]. This supports a number of markup styles;
for CCC code we will use !reStructuredText (RST), using
[http://epydoc.sourceforge.net/ Docutils]. This combination provides a fairly easy to read
and lightweight markup within the source code itself, but will allows us to
generate high quality documentation for all the CC code.
(*TBD* pao to provide an example of sort of output we should be able generate,
which will use Sphinx; as used for Python 2.6/3.0.)


==== General Guidelines ====

As a minimum you should document all public modules, classes, functions and
methods. For functions and methods, aim to describe all the arguments and the
return value, plus any exceptions that the user might reasonably expect.

The main place for API docuemtation is in docstrings. In general,
[http://www.python.org/dev/peps/pep-0257/ PEP257] applies. What follows extends this
and, partly, overrides the PEP.

For functions and methods, adopt the following general style:

{{{
def func(...):
    """A short concise summary of what the function does.

    A detailed descriptions,
    on several lines, but try to be reasonably concise.

    :Return:
        Describe what is returned. [Omit if the function provide no useful
        return value.]
    :Param param1:
        Describe param 1.
    :Param param2, param3:
        Describe params 1 and 3
    :Raise exc1:
        Describe why exc1 is raised.
    :Raise exc2:
        Describe why exc2 is raised.

    """
    pass
}}}

For classes and modules use the same style, but (obviously) omit the
parameters, return values and exceptions.

Some detailed rules:

    * If your function/method has no arguments then simply omit all `:Param...:` entries. The function's signature is good enough. Use an active, imperative style; "calculate the square of x", rather than "this function will calculate the square of x".
    * Similarly only document the return value and exceptions when necessary.
    * The first sentence should be usable within a summary page so it should be short and concise. It should *never* be longer than a single sentence and, ideally, should fit on the first line.
    * Leave a blank line before the closing quotes, in accordance with [http://www.python.org/dev/peps/pep-0257/ PEP257].

The `:Param...` and similar entries are _EpyDoc-RST_` constructs.

For a script, the docstring should provide detailed usage information, such as
you might provide in a manual page. This advice differs from
[http://www.python.org/dev/peps/pep-0257/ PEP257], which says the docstring
should be usable as a usage message. However, the PEP suggestion does not work
so well with [http://www.python.org/doc/2.4.4/lib/module-optparse.html
optparse]. It is better to provide a `--man`` option to your script (*TBD*, pao
to link to a useful example).


More information of using !EpyDoc syntax to document code will appear on EpyDocRst.


== Fortran, C, /bin/sh ==

*sigh*