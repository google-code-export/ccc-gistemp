#summary The coding standards to be used for the project.
#labels Phase-Implementation,Featured

= Introduction =

Coding standards are necessary to preserve everyone's sanity on a shared software project.


= Standards =

Please be: Clear; Simple; Conservative.  Avoid optimisation.

Coding in Python is preferred.  Avoid other languages where possible.

== Python ==

[http://www.python.org/dev/peps/pep-0008/ PEP 8] applies.  A very brief summary of which is: 4 space indent (no tabs); 79 columns; one import per line; no white-space before colons; newline immediately after a colon.

All Python code should run on a Python 2.4 system (see "Please be conservative", above).  So do not use newer features.  Read the [http://www.python.org/doc/2.4.4/ Python 2.4 documentation] to avoid accidentally using newer features.  But be aware that Python may actually be run using a newer Python version.  So do not use anything that changes in a later version (I don't know of anything important off-hand, but obviously anything deprecated is right out).

(In particular regarding Python 2.4 compatible code:) «x if c else y» (Python's ternary expression) is not allowed, as it is Python 2.5.

Avoid non-standard extensions.  Sadly this means no numy, no PIL.  For now.

Python files should start with a #! line then an $Id$ line:

{{{
#!/usr/bin/env python
# $Id$
}}}

In general they should be executable and should run tests when executed, unless they actually implement a command line tool.

=== import ===

(one per line, see PEP 8)

The line previous to an import statement should be a comment that refers to the documentation for the module.  Try and find a reference to the exact version of the documentation you were reading when you used the module.  So prefer http://www.python.org/doc/2.4.4/lib/module-urllib.html over http://www.python.org/doc/lib/module-urllib.html (python.org seems to have recently become friendlier in this regard, it will automatically convert a version-generic doc URL into a particular version, making it more likely that you end up referencing the documentation for a particular version).  Referencing the particular version of the documentation means that we know which version of the module you were programming against.

Avoid `from foo import *`.

An import that is local to a function is okay (this is actually a violation of PEP 8, which says all imports must go at the top of file, but I quite like it.  Discuss).

== Fortran, C, /bin/sh ==

*sigh*