#summary An Minimal reStructureText Primer for Python Coders.

= Minimal reStructureText Primer =

!ReStructureText is a powerful markup text markup language, but which is
nevertheless remarkably lightweight in most circumstances. Its lightweight
nature makes it very well suited to embedded code and API documentation; the
markup was designed to be as unobtrusive as possible. Often, reStructureText
looks little different from text as you would normally type it in, for
example, a `README` file.

In many ways, reStructureText is quite similar to the various flavours of
of WIKI markup styles. The following section provides a *very* brief primer
for basic reStructureText. 

What follows is only a small subset of reStructureText, mainly limited to the
markup that is useful for embedded API documentation, For full details of what
reStructureText allows, see the [http://epydoc.sourceforge.net/ Docutils]
site.


== Basic Inline Markup ==

|| reStructureText                     || Result                             ||
|| Inline `*emphasis*`                 || Inline _emphasis_                  ||
|| Inline {{{**bold**}}}               || Inline *bold*                      ||
|| Inline {{{``literal``}}} fixed font || Inline `literal` fixed font        ||
|| Inline `interpreted text`           || Inline interpreted text            ||

The `interpreted text` markup is a generic mechanism, which within !EpyDoc is
used to provide hyper-linking to modules, classes, etc.


== Paragraphs ==

In reStructureText, paragraphs a generally blocks of texts separated by one of
more blanks lines. For example:

{{{
This is a single line paragraph.

This is a second paragraph because there is a blank line *before* it. The
general rule is that you need to insert blank lines in order to distinguish
different paragraph elements.

    This is a block quoted paragraph. Block quoting is indiciated by indenting
    with respect to the previous paragraph element.

       This is a further block quoted paragraph.

This takes us back to the the main paragraph level.
}}}

See [http://www.ollis.eclipse.co.uk/snippets/paragraphs.html here]
for the basic HTML output generated by [http://epydoc.sourceforge.net/ Docutils].

It is common practice to wrap paragraphs properly so that they look OK on an
80 character terminal. This is not absolutely essential, but reStructureText
is supposed be readable "as is".


== Bullets and Numbering ==

Bullet and numbered lists look pretty much like you would type them. For
example:

{{{
The following shows a nested set of bulleted and numbered lists.

- A bullet item, which can span lines, but which will get wrapped when it is
  rendered.

- A second bullet.

  - Nested items work as well. You **must** have blank line before the item in
    a nested list.
  - But, often you do not need extra blank lines. DocUtils is pretty good at
    figuring out what you mean.

1. You can provide numbered lists.
2. Using

   a. The normal

      i.  Set of numbering
      ii. Schemes.
      #.  Using a hash if you get bored with counting yourself.
      #.  And you can nest

          - Bulleted lists and numbered lists
          - Pretty much as you would expect.
}}}

Notice that, as for other paragraphs, the items are properly wrapped to be
readable "as is". The normal rule of blank lines before paragraphs
is relaxed a bit for list items.

You need to be careful about the indentation for list items. Notice how the
final bullet list lines up vertically with the content of the previous
(outer) numbered list.

See [http://www.ollis.eclipse.co.uk/snippets/nested.html here]
for the basic HTML output generated by [http://epydoc.sourceforge.net/ Docutils].


== Definitions, fields and footnotes ==

Easiest shown by example.

{{{
Some Definitions
----------------

reStructureText
    A powerful markup text markup language, but which is nevertheless
    remarkably lightweight in most circumstances. Its lightweight nature makes
    it very well suited to embedded code and API documentation; the markup was
    designed to be as unobtrusive as possible [#]_. 

Docutils
    The project that defined reStructureText and provides the definitive set
    of tools for processing reStructureText into various output formats.

Epydoc
    A Python API documentation extraction tool, which can use reStructureText
    as its markup syntax.


Some Field Lists
----------------

:Meat: Tinned Spam
:Version: 0.2
:Dedication:
    To all the climate scientists around the World who continually strive to
    alert us about the dangers of climate change.


.. [#] Often, reStructureText looks little different from text as you would
       normally type it in, for example, a `README` file.
}}}

See [http://www.ollis.eclipse.co.uk/snippets/misc1.html here]
for the basic HTML output generated by [http://epydoc.sourceforge.net/ Docutils].


== Tables ==

If used sparingly, they can be useful in API documentation.

These examples come straight from the [http://epydoc.sourceforge.net/
Docutils] website.

{{{
Grid table:

+------------+------------+-----------+
| Header 1   | Header 2   | Header 3  |
+============+============+===========+
| body row 1 | column 2   | column 3  |
+------------+------------+-----------+
| body row 2 | Cells may span columns.|
+------------+------------+-----------+
| body row 3 | Cells may  | - Cells   |
+------------+ span rows. | - contain |
| body row 4 |            | - blocks. |
+------------+------------+-----------+

Simple table:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======
}}}

See [http://www.ollis.eclipse.co.uk/snippets/tables.html here]
for the basic HTML output generated by [http://epydoc.sourceforge.net/ Docutils].


== Sections and Headings ==

Heading are indicated using different underline characters.

{{{
A Main Heading
==============

The above heading is created by underling the text with a sequance of equals
characters.


A Sub-heading
-------------

This is a sub-section because its heading uses dashes for underlines.


A Sub-Sub-heading
~~~~~~~~~~~~~~~~~

This is a sub-sub-heading because its heading uses a third type of underline
character.


Another Main Heading
====================

And, so on...
}}}

See [http://www.ollis.eclipse.co.uk/snippets/sections.html here]
for the basic HTML output generated by [http://epydoc.sourceforge.net/ Docutils].

[http://epydoc.sourceforge.net/ Docutils] allows quite a large number of
punctuation characters to be used for underlining and works out which ones are
used for each heading level automatically. However, it is a good idea to use a
fixed convention; recommended is:

{{{
Heading 1   Heading 2   Heading 3   Heading 4   Heading 5
=========   ---------   ~~~~~~~~~   """""""""   '''''''''
}}}

For API documentation in Python source files, headings are generally best
avoided because they can cause problems with generated API documentation.