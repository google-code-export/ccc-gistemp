#summary Google Summer of Code 2012 Ideas Page

= Introduction =

This is the Climate Code Foundation's list of projects and ideas for Google Summer of Code 2012 (GSoC).  GSoC is a programme funded by Google where students work on open source projects and earn a stipend for doing so.  For more about GSoC, see their [http://www.google-melange.com/gsoc/homepage/google/gsoc2012 website].

Please discuss these projects and make suggestions on the <a href="http://mailman.climatecode.org/mailman/listinfo/gsoc-2012">mailing list</a>.

*Proposals from students who have not shown up on the mailing list to discuss their ideas will probably be rejected.*    We strongly recommend that you discuss your ideas on the mailing list, so we can help you to devise a strong proposal.

*Proposals which are cut-and-paste from this list will be rejected.*  None of these ideas are detailed enough to make a project proposal. They are just starting points. Some of them, as they stand, are far too small to form a suitable project.  In contrast, some of them are far too large and wide-ranging to be completed in a single GSoC project.   They are just sketches of the directions in which we want to move.

*We are happy to consider proposals which are not from this list, especially from earth sciences students.*  If you have an active interest relating to the Foundation's goals (promoting the public understanding of climate science) then a project based on that is more likely to succeed.

= ccc-gistemp ideas =

Nick Barnes is intending to return to _ccc-gistemp_ development this summer, so any student working on it is likely to be working alongside him.

== Import GISTEMP updates ==
Reto Ruedy at NASA GISS has updated GISTEMP fairly recently.  We need to import those changes, analyse them, and update our code accordingly.

== Flexible Grids ==
Replace the 8000 cell equal area grid, which is unique to the GISTEMP analysis, with a flexible gridding system so that "industry standard" grids can be used.  These seem mostly to be simple NxN or NxM degree grids.  The user should be able to specify a grid on the command line.  All the code for a given grid should be in a separate module, so third parties could develop new grids.  There is some overlap with _GIS Integration_ because GIS tools may expect a regular grid.  This will require Python expertise and a willingness to get very intimate with the internals of ccc-gistemp.

== GIS Integration ==
The current GISTEMP products (gridded and zonal) are in binary formats that are peculiar to GISTEMP.  We would like to see output files that can be plugged straight into industry standard GIS tools.  We are not experts in this field, so this would suit a student who already has some GIS expertise, who can make sensible choices regarding tools and formats.  Is NetCDF part of the answer? We expect that this idea could be completed without needing to get bogged down with the internals of ccc-gistemp.

== Super Whizzy Visualisation Browser ==
A really cool super whizzy dataset and station record browser where you can see the time series, gridded datasets, stations, and the station combinations and adjustments made.  Allows "drilling down" to see how any particular part of the global time series is comprised of combinations of cells and stations, and "drilling up" to see how stations combine to form averages over larger areas.  Also allows inspection of the internals of GISTEMP to show exactly how stations combine, and the periods and references series used for the urban adjustment (say).

== NumPy Implementation ==
ccc-gistemp is never quite as fast as we'd like (because of the emphasis on clarity).  Most of the time is spent inside a very small amount of code (primarily series.combine).  We don't advocate requiring non-standard Python modules (such as NumPy) in order to run ccc-gistemp, but it may be a good idea to exploit them if they are available.  Provide a "drop-in" replacement for a small amount of the ccc-gistemp code that accelerates it if NumPy is available.  Would require Python and NumPy expertise.  Some work in this direction was done in the 2011 GSoC.

== Publication-Quality Figures ==
The figures and charts that ccc-gistemp produces, such as the one on the <a href="http://code.google.com/p/ccc-gistemp/">project googlecode home page</a>, are fine for simple visualisation and checking, but are not really good enough for a figure for a scientific publication.  The current figures require no additional software to be installed, but we see no reason (similar to the _Alternate NumPy Implementation_) why extra optional tools that produced publication quality figures could not require some additional installation.  We would expect a suitable framework to be identified (matplotlib / rpy / something we haven't heard of).

== Every Published Figure ==
Take a publication like http://pubs.giss.nasa.gov/cgi-bin/abstract.cgi?id=ha00510u (Hansen et al 2010) and make sure that we have software that can do a ccc-gistemp version of every figure in there.

== Coding for ccc-gistemp Paper ==

We are preparing a paper for presentation, to describe ccc-gistemp and some of the research we have done using it.  This has required some code (e.g. to make figures).  We would welcome help with this as part of a project (this would probably go well with one of the other 'Figures' project ideas above).  If you make a large contribution to the paper, you should become a co-author.

= ccf-homogenization ideas =

In GSoC 2011 Dan Rothenberg reimplemented the Menne/Williams pairwise homogenization code in Python, found some bugs, and generally did an awesome project.  That needs to be completed, re-validated against the current GHCN-M 3.1.0 dataset and code.  See also the next idea (_ccf-homogenization_ should be built as a good citizen for a general homogenization framework).

= Homogenization framework/platform/benchmarking/test system =

Peter Thorne at NCDC (chair of the International Surface Temperature Initiative) has a vision for a sophisticated pluggable framework for supporting, comparing, and testing homogenization algorithms. This could combine well with the previous idea.  The dominant source of uncertainty in our estimates of climate change arises from the impact of the choices of pathway from bias-impacted 'raw' data to a final product: there is no 'how to' guide. By creating a modular framework whereby investigators can plug and play with different reasonable approaches to different, necessary, steps we would better enable an assessment of this uncertainty. The code would also be run on benchmarks (http://www.surfacetemperatures.org/benchmarking-and-assessment-working-group). In the longer term a successful project may add a gaming element for the serious gaming community. Getting the crowd to act as a 'neural network' by running code variants on the observations and the benchmarks.

= Common Climate Project ideas =

In GSoC 2011 Hannah Aizenman built a web framework for the Common Climate Project. The mentoring academics would like this to be taken forward and incorporated into a working, usable website.  Talk with us on the mailing list for more details.

= Met Office ideas =

A recent visit to the UK Met Office threw up several project ideas:

== HadISD ==

A team at the Met Office are building HadISD, a high-resolution land dataset.  Their intention is to make their code open-source and usable to third parties.  They would be interested in a student proposal to contribute to that.  They have a number of ideas for future refinement of their system (e.g. more/better quality control, Bayesian flagging, incorporating additional climatic variables), and are also interested in accessibility (e.g. a GUI station selector? a maps mashup? more visualisation tools, e.g. web visualisation?) and in separating out their quality-control code into a stand-alone library.  A student would work with a Met Office mentor.

== UKMO Shared Routines ==

The UK Met Office Hadley Centre develop a number of climate
data-products. This involves designing and coding routines that could be
of great use to both researchers and interested others. This is mostly
in IDL and created without a third party user in mind. Several teams at
the Met Office are interested in (a) using languages other than IDL
and/or (b) open source release of their work. Re-implementation of some
of these routines in Python, with GUIs in places, could be highly
advantageous. A student working with a Met Office mentor could make
significant contributions to opening up climate-data routines to the
wider community.

== HadCRUT4 ==

HadCRUT4 is coming soon (probably published before GSoC 2012 starts).  This idea is for a project to open up the analysis and visualize the results. _more information to be supplied_

= Other ideas =

== climate-specific matplotlib improvements ==
Matplotlib is an awesome Python library for drawing graphs, charts, contour maps, etc.  There are some ways in which it could be even better.  Two simple instances which could save time and effort: non-linear segmented colormaps; and a GUI for making segmented colormaps - both linear and otherwise.  I'm sure there are more.  Canvass opinion among climate scientist matplotlib users and put together a proposal accordingly.  This would require matplotlib familiarity, and working with the matplotlib developer community.  The matplotlib community has expressed an interest in co-mentoring such a proposal (which might also work well with some of the 'Figure' ideas listed above).

One climate scientist recently suggested that there could be a project to bring GUI features from IDL into the Python/matplotlib world.  I don't know enough about IDL to comment.  Do you?

== Simple animated energy balance model ==

A set of very simple web-based animated models, starting with the simplest of zero-dimensional climate models, and adding various climate system components.  Web ninja skills required.

== There's an App for That ==

Is there?  Are there any Android (or iOS) apps for climate data?  Are there any good ones?  One possibility would be a version of the "2050 Pathways" tool from DECC (more complete than the toy app they have available at present).  The existing web tool is all open-source and based on open data.

== Open ICOADS ==

The international surface marine database ICOADS has over two decades heritage and been enormously successful. It has also been largely dependent upon one or two individuals. The largest practical barrier to truly international participation is a lack of easily usable and version controlled code. This project would look to provide an open source, well documented, version of the code to promote multi-national participation in this archive. This is vital work - the oceans cover 70% of the earth's surface and without ICOADS it would be nearly impossible to characterize changes in sea surface temperatures, humidity, pressure etc. The student would work with several partner institutes in the US and UK.

== Climate Code Directory ==

We have plans for a "Climate Code Directory": a comprehensive and searchable catalogue of published climate science software. We aim to make it possible to quickly discover any available code underpinning a given climate science publication.  There are already some lists of climate software, and some climate science bibliography sites, on the web, we could start by scraping those.  This project is definitely going to happen anyway, so you might be working fairly closely with an existing Foundation developer.  This will obviously need quite a bit of web development, scraping, and presumably RDF and Semantic Web.  Coding is likely to be in Python and JavaScript.  If you don't know what "Dublin Core" means, this may not be for you.

== Climate Science Libraries ==

There are a number of functions of climate science software - or of science software in general - which could be formed into useful open-source software libraries.  Some such libraries already exist, but are not available in our preferred languages.  A project to create new libraries, or provide Python bindings for existing ones, could be very useful.

A good example is the CLiMT project http://people.su.se/~rcaba/climt/ a climate-modelling toolkit which includes Fortran components with Python bindings.  See also PyAOS, PyClimate.

Another approach might be to combine together existing climate science libraries (in, say, Python), into some sort of bundle.

== Data Access Library ==

Another, seemingly trivial example: scientists often need to obtain source data across the internet, for instance by FTP.  The data files may change their names, or require a changing web query.  Has the dataset been updated?   Or maybe each month's new data is in a separate file, and we need to check whether there are any new files?  Does the software fail elegantly if the data is missing, unobtainable, or the connection times out?  What format is the data in?  Plain-text?  Fortran or other raw binary?  What endianness?  Can I detect these automatically and make a good guess?  Can I plug in readers for a variety of different data formats?  Can I validate it?  Write a library to take all the pain out of this process.  Include a directory of commonly-used datasets.  A scientist should be able to write something like this:
{{{
import climate_data_access as cda
import climate_data_directory as cdd
G = cda.fetch(cdd.GISTEMP)
for datum in G.global:
    if datum.year > 2000:
        print datum
}}}

This could be backed with a website directory for datasets, with interfaces for registering new sets and server-side code to validate them.

== Clear R Implementation of GISTEMP or other algorithms ==
("R" is a codeword for "some language other than Python")  Being aware that Python is not as popular as we would like in some communities, we see a need for Clear implementations (of GISTEMP-style analyses) in other languages.  R has a good track record in certain communities, and is entirely Open Source (so we would prefer it over IDL or MATLAB, say).  We would not expect the same "bug for bug" compatible approach that ccc-gistemp takes.  Given the timescales, we would expect a simpler approach would be taken.  We could advise.

== CRUTEM Implementation ==
There are two parallel implementations of CRUTEM, in Fortran (CRU) and Perl (Hadley Centre).  Apparently the Perl code is open source.  How clear is it?  Can we make it clearer?

== BEST reimplementation ==

The Berkeley Earth Surface Temperature project has an open-source body of Matlab code implementing a number of fairly novel ideas and combining them in a novel way.  Unfortunately it's in Matlab and therefore inaccessible for interested members of the public (without a Matlab license): we can't tinker with it and experiment with changes to data or algorithms.  Re-implementing this code - or parts of it - in an open-source framework would be an interesting project.

== Sea-Ice Visualisation / Crowd-Sourcing Website ==
A website which presents satellite images of arctic sea ice, such as the visible-light ones from MODIS, and allows users to visually identify features.  The site collects the data into some useful dataset, and also provides visual feedback to the users.  For instance, the site might show several images from different days.  The user can select a distinctive feature on a floe, and mark it on several separate images.  The website deduces the drift velocity, displays it somehow, and collects the data.  Compare with Galaxy Zoo and Old Weather, for successful crowd-sourced science data sites.

Alternatively, a site which just presents the variety of arctic sea ice data sets in separate layers on a single map - a Google Maps mashup?  Or a Google Earth application of some sort.  There's a lot of information out there.

We are very open to further suggestions, and will update this page over time.